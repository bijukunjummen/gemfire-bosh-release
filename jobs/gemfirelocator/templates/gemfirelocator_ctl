#!/bin/bash -e

BIN_DIR=/var/vcap/packages/gemfireserver/Pivotal_GemFire/bin
LIB_DIR=/var/vcap/packages/gemfireserver/Pivotal_GemFire/lib
RUN_DIR=/var/vcap/sys/run/gemfirelocator
LOG_DIR=/var/vcap/sys/log/gemfirelocator
PIDFILE=$RUN_DIR/gemfirelocator.pid
STDOUTLOG=$LOG_DIR/gemfirelocator.stdout.log
STDERRLOG=$LOG_DIR/gemfirelocator.stderr.log
LOCATORNAME=locator<%= spec.index %>
LOCATORIPADDR=<%= spec.networks.send(properties.gemfire_locator.networks.apps).ip %>

export JAVA_HOME=/var/vcap/packages/gemfire_jvm7
export PATH=$PATH:$JAVA_HOME/bin:$BIN_DIR

source /var/vcap/packages/common/utils.sh  
case $1 in
  start)
    pid_guard $PIDFILE "gemfire"

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR
    cd $LOG_DIR

    # (re)move any existing directory that might contain stale state - only support adding an fresh node to the cluster
    if ls $LOCATORNAME &> /dev/null
    then
      rm -rf $LOG_DIR/$LOCATORNAME
    fi

    PROP_DIR=`dirname "$0"`
        echo "Current Dir for props: $PROP_DIR"
    
    gfsh start locator --name=$LOCATORNAME --force=true --connect=false --J=-Dgemfire.jmx-manager=true --J=-Dgemfire.jmx-manager-start=true --properties-file=$PROP_DIR/gemfire.properties | grep "Process ID" | sed s/Process\ ID:\ // > $PIDFILE
    ;;

  stop)
    # first try a graceful shutdown
    gfsh -e "connect --locator=$LOCATORIPADDR[$PORT]" -e "stop locator --name=$LOCATORNAME"
    # and if that doesn't work, kill the process
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: gemfirelocator_ctl {start|stop}"

    ;;

esac
